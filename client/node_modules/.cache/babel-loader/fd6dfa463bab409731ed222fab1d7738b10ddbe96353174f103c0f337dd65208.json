{"ast":null,"code":"var _jsxFileName = \"/Users/justinzhao/Github/tomotime/selfie-snake/src/Components/ZigZag.js\";\nimport { Box, Image, SimpleGrid } from \"@chakra-ui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageRow = ({\n  images,\n  offset\n}) => /*#__PURE__*/_jsxDEV(Box, {\n  display: \"flex\",\n  justifyContent: offset ? \"flex-end\" : \"flex-start\",\n  mb: 4,\n  children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n    columns: images.length,\n    spacing: 4,\n    children: images.map((src, index) => /*#__PURE__*/_jsxDEV(Image, {\n      src: src,\n      boxSize: \"150px\",\n      objectFit: \"cover\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 3\n}, this);\n\n// The main Zigzag component\n_c = ImageRow;\nexport const ZigzagPattern = ({\n  imageUrls\n}) => {\n  // Determine the chunk sizes for the zigzag pattern\n  const chunkSizes = [3, 2, 2];\n\n  // Split the imageUrls array into chunks based on the pattern\n  const chunkedImages = [];\n  let startIndex = 0;\n  while (startIndex < imageUrls.length) {\n    for (let size of chunkSizes) {\n      if (startIndex >= imageUrls.length) break;\n      chunkedImages.push(imageUrls.slice(startIndex, startIndex + size));\n      startIndex += size;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: chunkedImages.map((images, index) => /*#__PURE__*/_jsxDEV(ImageRow, {\n      images: images,\n      offset: index % 2 !== 0\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ZigzagPattern;\nvar _c, _c2;\n$RefreshReg$(_c, \"ImageRow\");\n$RefreshReg$(_c2, \"ZigzagPattern\");","map":{"version":3,"names":["Box","Image","SimpleGrid","jsxDEV","_jsxDEV","ImageRow","images","offset","display","justifyContent","mb","children","columns","length","spacing","map","src","index","boxSize","objectFit","fileName","_jsxFileName","lineNumber","columnNumber","_c","ZigzagPattern","imageUrls","chunkSizes","chunkedImages","startIndex","size","push","slice","_c2","$RefreshReg$"],"sources":["/Users/justinzhao/Github/tomotime/selfie-snake/src/Components/ZigZag.js"],"sourcesContent":["import { Box, Image, SimpleGrid } from \"@chakra-ui/react\";\n\nconst ImageRow = ({ images, offset }) => (\n  <Box\n    display=\"flex\"\n    justifyContent={offset ? \"flex-end\" : \"flex-start\"}\n    mb={4}\n  >\n    <SimpleGrid columns={images.length} spacing={4}>\n      {images.map((src, index) => (\n        <Image key={index} src={src} boxSize=\"150px\" objectFit=\"cover\" />\n      ))}\n    </SimpleGrid>\n  </Box>\n);\n\n// The main Zigzag component\nexport const ZigzagPattern = ({ imageUrls }) => {\n  // Determine the chunk sizes for the zigzag pattern\n  const chunkSizes = [3, 2, 2];\n\n  // Split the imageUrls array into chunks based on the pattern\n  const chunkedImages = [];\n  let startIndex = 0;\n  while (startIndex < imageUrls.length) {\n    for (let size of chunkSizes) {\n      if (startIndex >= imageUrls.length) break;\n      chunkedImages.push(imageUrls.slice(startIndex, startIndex + size));\n      startIndex += size;\n    }\n  }\n\n  return (\n    <Box>\n      {chunkedImages.map((images, index) => (\n        <ImageRow key={index} images={images} offset={index % 2 !== 0} />\n      ))}\n    </Box>\n  );\n};\n"],"mappings":";AAAA,SAASA,GAAG,EAAEC,KAAK,EAAEC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAO,CAAC,kBAClCH,OAAA,CAACJ,GAAG;EACFQ,OAAO,EAAC,MAAM;EACdC,cAAc,EAAEF,MAAM,GAAG,UAAU,GAAG,YAAa;EACnDG,EAAE,EAAE,CAAE;EAAAC,QAAA,eAENP,OAAA,CAACF,UAAU;IAACU,OAAO,EAAEN,MAAM,CAACO,MAAO;IAACC,OAAO,EAAE,CAAE;IAAAH,QAAA,EAC5CL,MAAM,CAACS,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACrBb,OAAA,CAACH,KAAK;MAAae,GAAG,EAAEA,GAAI;MAACE,OAAO,EAAC,OAAO;MAACC,SAAS,EAAC;IAAO,GAAlDF,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA+C,CACjE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACV,CACN;;AAED;AAAAC,EAAA,GAdMnB,QAAQ;AAed,OAAO,MAAMoB,aAAa,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAC9C;EACA,MAAMC,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;EAE5B;EACA,MAAMC,aAAa,GAAG,EAAE;EACxB,IAAIC,UAAU,GAAG,CAAC;EAClB,OAAOA,UAAU,GAAGH,SAAS,CAACb,MAAM,EAAE;IACpC,KAAK,IAAIiB,IAAI,IAAIH,UAAU,EAAE;MAC3B,IAAIE,UAAU,IAAIH,SAAS,CAACb,MAAM,EAAE;MACpCe,aAAa,CAACG,IAAI,CAACL,SAAS,CAACM,KAAK,CAACH,UAAU,EAAEA,UAAU,GAAGC,IAAI,CAAC,CAAC;MAClED,UAAU,IAAIC,IAAI;IACpB;EACF;EAEA,oBACE1B,OAAA,CAACJ,GAAG;IAAAW,QAAA,EACDiB,aAAa,CAACb,GAAG,CAAC,CAACT,MAAM,EAAEW,KAAK,kBAC/Bb,OAAA,CAACC,QAAQ;MAAaC,MAAM,EAAEA,MAAO;MAACC,MAAM,EAAEU,KAAK,GAAG,CAAC,KAAK;IAAE,GAA/CA,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA4C,CACjE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACU,GAAA,GAtBWR,aAAa;AAAA,IAAAD,EAAA,EAAAS,GAAA;AAAAC,YAAA,CAAAV,EAAA;AAAAU,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}