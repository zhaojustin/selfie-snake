{"ast":null,"code":"var _jsxFileName = \"/Users/justinzhao/Github/tomotime/selfie-snake/src/Components/Snake.js\";\nimport { Box, Image, Flex } from \"@chakra-ui/react\";\n\n// A helper component for a single image row\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageRow = ({\n  images,\n  offset\n}) => /*#__PURE__*/_jsxDEV(Flex, {\n  justifyContent: offset ? \"flex-end\" : \"flex-start\",\n  mb: 4,\n  children: offset ? /*#__PURE__*/_jsxDEV(Flex, {\n    children: images.reverse().map((src, index) => /*#__PURE__*/_jsxDEV(Image, {\n      borderRadius: \"50%\",\n      mt: () => {\n        if (index == 1) return 10;else if (index == 2) return 0;\n        return 20;\n      },\n      src: src,\n      boxSize: \"100px\",\n      objectFit: \"cover\",\n      mx: 2\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(Flex, {\n    children: images.map((src, index) => /*#__PURE__*/_jsxDEV(Image, {\n      mt: () => {\n        if (index == 1) return 10;else if (index == 2) return 20;\n        return 0;\n      },\n      src: src,\n      boxSize: \"100px\",\n      objectFit: \"cover\",\n      mx: 2\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\n_c = ImageRow;\nexport const ZigzagPattern = ({\n  imageUrls\n}) => {\n  // split the imageUrls array into chunks of 3 images each\n  const chunkedImages = [];\n  for (let i = 0; i < imageUrls.length; i += 3) {\n    chunkedImages.push(imageUrls.slice(i, i + 3));\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: chunkedImages.map((images, index) => /*#__PURE__*/_jsxDEV(ImageRow, {\n      images: images,\n      offset: index % 2 !== 0\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ZigzagPattern;\nvar _c, _c2;\n$RefreshReg$(_c, \"ImageRow\");\n$RefreshReg$(_c2, \"ZigzagPattern\");","map":{"version":3,"names":["Box","Image","Flex","jsxDEV","_jsxDEV","ImageRow","images","offset","justifyContent","mb","children","reverse","map","src","index","borderRadius","mt","boxSize","objectFit","mx","fileName","_jsxFileName","lineNumber","columnNumber","_c","ZigzagPattern","imageUrls","chunkedImages","i","length","push","slice","_c2","$RefreshReg$"],"sources":["/Users/justinzhao/Github/tomotime/selfie-snake/src/Components/Snake.js"],"sourcesContent":["import { Box, Image, Flex } from \"@chakra-ui/react\";\n\n// A helper component for a single image row\nconst ImageRow = ({ images, offset }) => (\n  <Flex justifyContent={offset ? \"flex-end\" : \"flex-start\"} mb={4}>\n    {offset ? (\n      <Flex>\n        {images.reverse().map((src, index) => (\n          <Image\n            key={index}\n            borderRadius={\"50%\"}\n            mt={() => {\n              if (index == 1) return 10;\n              else if (index == 2) return 0;\n              return 20;\n            }}\n            src={src}\n            boxSize=\"100px\"\n            objectFit=\"cover\"\n            mx={2}\n          />\n        ))}\n      </Flex>\n    ) : (\n      <Flex>\n        {images.map((src, index) => (\n          <Image\n            mt={() => {\n              if (index == 1) return 10;\n              else if (index == 2) return 20;\n              return 0;\n            }}\n            key={index}\n            src={src}\n            boxSize=\"100px\"\n            objectFit=\"cover\"\n            mx={2}\n          />\n        ))}\n      </Flex>\n    )}\n  </Flex>\n);\n\nexport const ZigzagPattern = ({ imageUrls }) => {\n  // split the imageUrls array into chunks of 3 images each\n  const chunkedImages = [];\n  for (let i = 0; i < imageUrls.length; i += 3) {\n    chunkedImages.push(imageUrls.slice(i, i + 3));\n  }\n\n  return (\n    <Box>\n      {chunkedImages.map((images, index) => (\n        <ImageRow key={index} images={images} offset={index % 2 !== 0} />\n      ))}\n    </Box>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}